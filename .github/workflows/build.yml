name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23'

      - uses: arduino/setup-task@v2
        with:
          # version: 3.20 # 3.x is good enough
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: task test

      - uses: codecov/codecov-action@v5

      # would it be better to define a separate release workflow, and call it?
      - if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: sigstore/cosign-installer@v3

      - if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: cycjimmy/semantic-release-action@v4
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/exec

      # kick the Go package index with the new version
      - if: ${{ steps.release.outputs.new_release_published == 'true' }}
        run: |
          curl https://proxy.golang.org/github.com/jaredreisinger/sensorpush-proxy/@v/${{ steps.release.outputs.new_release_git_tag }}.info

      - uses: act10ns/slack@v2
        if: always()
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
